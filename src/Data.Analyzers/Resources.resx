<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DuplicateMounterRegistration_Message" xml:space="preserve">
    <value>Duplicate mounter registration for property '{0}'.</value>
  </data>
  <data name="DuplicateMounterRegistration_Title" xml:space="preserve">
    <value>Duplicate mounter registration.</value>
  </data>
  <data name="InvalidRegisterLocalColumn_Message" xml:space="preserve">
    <value>Local column '{0}' is invalid for RegisterColumn, use RegisterLocalColumn instead.</value>
  </data>
  <data name="InvalidRegisterLocalColumn_Title" xml:space="preserve">
    <value>Local column is invalid for RegisterColumn.</value>
  </data>
  <data name="InvalidRegisterMounterGetterParam_Message" xml:space="preserve">
    <value>The getter parameter must be a lambda expression which returns a non-readonly property of current class.</value>
  </data>
  <data name="InvalidRegisterMounterGetterParam_Title" xml:space="preserve">
    <value>Invalid getter of mounter registration.</value>
  </data>
  <data name="InvalidRegisterMounterInvocation_Message" xml:space="preserve">
    <value>Mounter registration is only allowed as static field initializer or static constructor statement.</value>
  </data>
  <data name="InvalidRegisterMounterInvocation_Title" xml:space="preserve">
    <value>Invalid invocation of mounter registration.</value>
  </data>
  <data name="MissingMounterRegistration_Message" xml:space="preserve">
    <value>Missing registration for model property '{0}'.</value>
  </data>
  <data name="MissingMounterRegistration_Title" xml:space="preserve">
    <value>Missing registration for model property.</value>
  </data>
  <data name="MounterNaming_Message" xml:space="preserve">
    <value>Mounter '{0}' of property '{1}' does not conform to naming convention, rename mounter name '{0}' to '{2}'.</value>
  </data>
  <data name="MounterNaming_Title" xml:space="preserve">
    <value>Mounter naming rule violation.</value>
  </data>
  <data name="PrimaryKeyInvalidConstructorParam_Message" xml:space="preserve">
    <value>The PrimaryKey constructor parameter '{0}' must be Column.</value>
  </data>
  <data name="PrimaryKeyInvalidConstructorParam_Title" xml:space="preserve">
    <value>Invalid PrimaryKey constructor parameter.</value>
  </data>
  <data name="PrimaryKeyInvalidConstructors_Message" xml:space="preserve">
    <value>PrimaryKey must have one constructor only.</value>
  </data>
  <data name="PrimaryKeyInvalidConstructors_Title" xml:space="preserve">
    <value>Invalid PrimaryKey constructors.</value>
  </data>
  <data name="PrimaryKeyMismatchBaseConstructorArgument_Message" xml:space="preserve">
    <value>Argument mismatch in PrimaryKey base constructor, {0}, {0}.Asc() or {0}.Desc() expected.</value>
  </data>
  <data name="PrimaryKeyMismatchBaseConstructorArgument_Title" xml:space="preserve">
    <value>Argument mismatch in PrimaryKey base constructor.</value>
  </data>
  <data name="PrimaryKeyMismatchBaseConstructor_Message" xml:space="preserve">
    <value>Mismatch in number of arguments passed to PrimaryKey base constructor, {0} argument(s) expected.</value>
  </data>
  <data name="PrimaryKeyMismatchBaseConstructor_Title" xml:space="preserve">
    <value>Mismatch in number of arguments passed to PrimaryKey base constructor.</value>
  </data>
  <data name="PrimaryKeyMismatchSortAttribute_Message" xml:space="preserve">
    <value>PrimaryKey SortAttribute mismatch: constructor - {0}, base - {1}.</value>
  </data>
  <data name="PrimaryKeyMismatchSortAttribute_Title" xml:space="preserve">
    <value>PrimaryKey SortAttribute mismatch.</value>
  </data>
  <data name="PrimaryKeyMissingBaseConstructor_Message" xml:space="preserve">
    <value>Invocation to PrimaryKey base constructor is missing.</value>
  </data>
  <data name="PrimaryKeyMissingBaseConstructor_Title" xml:space="preserve">
    <value>Missing PrimaryKey base initializer.</value>
  </data>
  <data name="PrimaryKeyNotSealed_Message" xml:space="preserve">
    <value>Class derived from PrimaryKey should be sealed.</value>
  </data>
  <data name="PrimaryKeyNotSealed_Title" xml:space="preserve">
    <value>PrimaryKey should be sealed.</value>
  </data>
  <data name="PrimaryKeyParameterlessConstructor_Message" xml:space="preserve">
    <value>Parameterless constructor is not valid for PrimaryKey.</value>
  </data>
  <data name="PrimaryKeyParameterlessConstructor_Title" xml:space="preserve">
    <value>Parameterless PrimaryKey constructor.</value>
  </data>
  <data name="PrimaryKeySortAttributeConflict_Message" xml:space="preserve">
    <value>Asc and Desc attributes are mutually exclusive.</value>
  </data>
  <data name="PrimaryKeySortAttributeConflict_Title" xml:space="preserve">
    <value>PrimaryKey SortAttribute conflict.</value>
  </data>
  <data name="ProjectionColumnNaming_Message" xml:space="preserve">
    <value>Projection column '{0}' from existing Mounter '{1}' violates naming rule.</value>
  </data>
  <data name="ProjectionColumnNaming_Title" xml:space="preserve">
    <value>Projection column naming rule violation.</value>
  </data>
</root>