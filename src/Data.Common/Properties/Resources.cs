// <auto-generated />

namespace DevZest.Data.Resources
{
	using System;
    using System.CodeDom.Compiler;
    using System.Globalization;
    using System.Resources;
    using System.Reflection;
    using System.Threading;

    // <summary>
    // Strongly-typed and parameterized string resources.
    // </summary>
    [GeneratedCode("Resources.tt", "1.0.0.0")]
    internal static class Strings
    {
        // <summary>
        // A string like "The provided getter expression is invalid."
        // </summary>
        internal static string Accessor_InvalidGetter
        {
            get { return ResourceLoader.GetString(ResourceLoader.Accessor_InvalidGetter); }
        }

        // <summary>
        // A string like "Cannot register accessor for type '{0}' after an instance of this type or its derived type has been created."
        // </summary>
        internal static string Accessor_RegisterAfterUse(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.Accessor_RegisterAfterUse, p0);
        }

        // <summary>
        // A string like "The accessor with OwnerType '{0}' and Name '{1}' has been registered already."
        // </summary>
        internal static string Accessor_RegisterDuplicate(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.Accessor_RegisterDuplicate, p0, p1);
        }

        // <summary>
        // A string like "The argument '{0}' cannot be null, empty or contain only white space."
        // </summary>
        internal static string ArgumentIsNullOrWhitespace(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.ArgumentIsNullOrWhitespace, p0);
        }

        // <summary>
        // A string like "Cannot call When after Else has been called."
        // </summary>
        internal static string Case_WhenAfterElse
        {
            get { return ResourceLoader.GetString(ResourceLoader.Case_WhenAfterElse); }
        }

        // <summary>
        // A string like "Cannot evaluate a non DataSet column: Column={0}, DataSource.Kind={1}."
        // </summary>
        internal static string ColumnAggregateFunction_EvalOnNonDataSet(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.ColumnAggregateFunction_EvalOnNonDataSet, p0, p1);
        }

        // <summary>
        // A string like "Aggregate function cannot be nested."
        // </summary>
        internal static string ColumnAggregateFunction_NestedAggregate
        {
            get { return ResourceLoader.GetString(ResourceLoader.ColumnAggregateFunction_NestedAggregate); }
        }

        // <summary>
        // A string like "Cannot resolve model chain from Column "{0}" to provided dataRow."
        // </summary>
        internal static string ColumnAggregateFunction_NoModelChain(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.ColumnAggregateFunction_NoModelChain, p0);
        }

        // <summary>
        // A string like "Duplicate ColumnKey is not allowed: OriginalOwnerType={0}, OriginalName={1}."
        // </summary>
        internal static string ColumnCollection_DuplicateColumnKey(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.ColumnCollection_DuplicateColumnKey, p0, p1);
        }

        // <summary>
        // A string like "Cannot get method info: Type={0}, MethodName={1}."
        // </summary>
        internal static string GenericInvoker_GetMethodInfo(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.GenericInvoker_GetMethodInfo, p0, p1);
        }

        // <summary>
        // A string like "The type resolver callback returns null."
        // </summary>
        internal static string GenericInvoker_TypeResolverReturnsNull
        {
            get { return ResourceLoader.GetString(ResourceLoader.GenericInvoker_TypeResolverReturnsNull); }
        }

        // <summary>
        // A string like "The class {0} is not implemented correctly. The column getter "{1}" returns null."
        // </summary>
        internal static string ColumnGroup_GetterReturnsNull(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.ColumnGroup_GetterReturnsNull, p0, p1);
        }

        // <summary>
        // A string like "The class {0} is not implemented correctly. The parent models of column "{1}" and "{2}" are inconsistent."
        // </summary>
        internal static string ColumnGroup_InconsistentParentModel(object p0, object p1, object p2)
        {
            return ResourceLoader.GetString(ResourceLoader.ColumnGroup_InconsistentParentModel, p0, p1, p2);
        }

        // <summary>
        // A string like "The expression is already attached to a Column."
        // </summary>
        internal static string Column_ExpressionAlreadyAttached
        {
            get { return ResourceLoader.GetString(ResourceLoader.Column_ExpressionAlreadyAttached); }
        }

        // <summary>
        // A string like "The expression cannot be set to a column owned by a model."
        // </summary>
        internal static string Column_ExpressionModelProperty
        {
            get { return ResourceLoader.GetString(ResourceLoader.Column_ExpressionModelProperty); }
        }

        // <summary>
        // A string like "The column's Expression exists and cannot be overwrite."
        // </summary>
        internal static string Column_ExpressionOverwrite
        {
            get { return ResourceLoader.GetString(ResourceLoader.Column_ExpressionOverwrite); }
        }

        // <summary>
        // A string like "The Model of the given DataRow must be the same as this column's ParentModel."
        // </summary>
        internal static string Column_VerifyDataRow
        {
            get { return ResourceLoader.GetString(ResourceLoader.Column_VerifyDataRow); }
        }

        // <summary>
        // A string like "The Model of the given DbReader parameter must be the same as this column's ParentModel."
        // </summary>
        internal static string Column_VerifyDbReader
        {
            get { return ResourceLoader.GetString(ResourceLoader.Column_VerifyDbReader); }
        }

        // <summary>
        // A string like "-- Canceled in {0} ms"
        // </summary>
        internal static string DbLogger_CommandCanceled(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_CommandCanceled, p0);
        }

        // <summary>
        // A string like "-- Completed in {0} ms with result: {1}"
        // </summary>
        internal static string DbLogger_CommandComplete(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_CommandComplete, p0, p1);
        }

        // <summary>
        // A string like "-- Executing at {0}"
        // </summary>
        internal static string DbLogger_CommandExecuting(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_CommandExecuting, p0);
        }

        // <summary>
        // A string like "-- Executing asynchronously at {0}"
        // </summary>
        internal static string DbLogger_CommandExecutingAsync(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_CommandExecutingAsync, p0);
        }

        // <summary>
        // A string like "-- Failed in {0} ms with error: {1}"
        // </summary>
        internal static string DbLogger_CommandFailed(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_CommandFailed, p0, p1);
        }

        // <summary>
        // A string like "Closed connection at {0}"
        // </summary>
        internal static string DbLogger_ConnectionClosed(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_ConnectionClosed, p0);
        }

        // <summary>
        // A string like "Failed to close connection at {0} with error: {1}"
        // </summary>
        internal static string DbLogger_ConnectionCloseError(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_ConnectionCloseError, p0, p1);
        }

        // <summary>
        // A string like "Opened connection at {0}"
        // </summary>
        internal static string DbLogger_ConnectionOpen(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_ConnectionOpen, p0);
        }

        // <summary>
        // A string like "Opened connection asynchronously at {0}"
        // </summary>
        internal static string DbLogger_ConnectionOpenAsync(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_ConnectionOpenAsync, p0);
        }

        // <summary>
        // A string like "Cancelled open connection at {0}"
        // </summary>
        internal static string DbLogger_ConnectionOpenCanceled(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_ConnectionOpenCanceled, p0);
        }

        // <summary>
        // A string like "Failed to open connection at {0} with error: {1}"
        // </summary>
        internal static string DbLogger_ConnectionOpenError(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_ConnectionOpenError, p0, p1);
        }

        // <summary>
        // A string like "Failed to open connection asynchronously at {0} with error: {1}"
        // </summary>
        internal static string DbLogger_ConnectionOpenErrorAsync(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_ConnectionOpenErrorAsync, p0, p1);
        }

        // <summary>
        // A string like "Failed to commit transaction at {0} with error: {1}"
        // </summary>
        internal static string DbLogger_TransactionCommitError(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_TransactionCommitError, p0, p1);
        }

        // <summary>
        // A string like "Committed transaction at {0}"
        // </summary>
        internal static string DbLogger_TransactionCommitted(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_TransactionCommitted, p0);
        }

        // <summary>
        // A string like "Failed to rollback transaction at {0} with error: {1}"
        // </summary>
        internal static string DbLogger_TransactionRollbackError(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_TransactionRollbackError, p0, p1);
        }

        // <summary>
        // A string like "Rolled back transaction at {0}"
        // </summary>
        internal static string DbLogger_TransactionRolledBack(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_TransactionRolledBack, p0);
        }

        // <summary>
        // A string like "Started transaction at {0}"
        // </summary>
        internal static string DbLogger_TransactionStarted(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_TransactionStarted, p0);
        }

        // <summary>
        // A string like "Failed to start transaction at {0} with error: {1}"
        // </summary>
        internal static string DbLogger_TransactionStartError(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.DbLogger_TransactionStartError, p0, p1);
        }

        // <summary>
        // A string like "Cannot call From method multiple times."
        // </summary>
        internal static string DbQueryBuilder_DuplicateFrom
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_DuplicateFrom); }
        }

        // <summary>
        // A string like "Invalid left key. Its ParentModel must be previously added as source query."
        // </summary>
        internal static string DbQueryBuilder_Join_InvalidLeftKey
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_Join_InvalidLeftKey); }
        }

        // <summary>
        // A string like "Invalid right key. Its ParentModel must be the same as the provided model parameter."
        // </summary>
        internal static string DbQueryBuilder_Join_InvalidRightKey
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_Join_InvalidRightKey); }
        }

        // <summary>
        // A string like "The child model is invalid. It must be child model of current query builder's Model, and can only be used to create child query builder once."
        // </summary>
        internal static string DbQueryBuilder_VerifyChildModel
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_VerifyChildModel); }
        }

        // <summary>
        // A string like "The model is invalid. Its DataSource.Kind must be DbTable, DbTempTable or DbQuery."
        // </summary>
        internal static string DbQueryBuilder_VerifyModel
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_VerifyModel); }
        }

        // <summary>
        // A string like "Aggregate expression is not supported."
        // </summary>
        internal static string DbQueryBuilder_VerifySourceColumnAggregateModels
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_VerifySourceColumnAggregateModels); }
        }

        // <summary>
        // A string like "The expression contains parent model '{0}' which does not exist in the source queries."
        // </summary>
        internal static string DbQueryBuilder_VerifySourceColumnParentModels(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_VerifySourceColumnParentModels, p0);
        }

        // <summary>
        // A string like "The target column has been selected already."
        // </summary>
        internal static string DbQueryBuilder_VerifyTargetColumn
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_VerifyTargetColumn); }
        }

        // <summary>
        // A string like "The child model's ParentModel must be the same as this object's Model."
        // </summary>
        internal static string InvalidChildModel
        {
            get { return ResourceLoader.GetString(ResourceLoader.InvalidChildModel); }
        }

        // <summary>
        // A string like "The child model returned by the getter is invalid. It cannot be null and its ParentModel must be the calling model."
        // </summary>
        internal static string InvalidChildModelGetter
        {
            get { return ResourceLoader.GetString(ResourceLoader.InvalidChildModelGetter); }
        }

        // <summary>
        // A string like "The column returned by the getter is invalid. It cannot be null and its ParentModel must be the calling Model."
        // </summary>
        internal static string InvalidColumnGetter
        {
            get { return ResourceLoader.GetString(ResourceLoader.InvalidColumnGetter); }
        }

        // <summary>
        // A string like "The class {0} is not correctly implemented. The override of GetPrimaryKeyOverride should not return null."
        // </summary>
        internal static string Model_GetPrimaryKeyOverrideReturnsNull(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.Model_GetPrimaryKeyOverrideReturnsNull, p0);
        }

        // <summary>
        // A string like "The identity increment value cannot be 0."
        // </summary>
        internal static string Model_InvalidIdentityIncrement
        {
            get { return ResourceLoader.GetString(ResourceLoader.Model_InvalidIdentityIncrement); }
        }

        // <summary>
        // A string like "The column must be child of this model."
        // </summary>
        internal static string Model_VerifyChildColumn
        {
            get { return ResourceLoader.GetString(ResourceLoader.Model_VerifyChildColumn); }
        }

        // <summary>
        // A string like "The operation is only allowed in design mode."
        // </summary>
        internal static string VerifyDesignMode
        {
            get { return ResourceLoader.GetString(ResourceLoader.VerifyDesignMode); }
        }

        // <summary>
        // A string like "Cannot define multiple identity column on the same table."
        // </summary>
        internal static string Model_MultipleIdentityColumn
        {
            get { return ResourceLoader.GetString(ResourceLoader.Model_MultipleIdentityColumn); }
        }

        // <summary>
        // A string like "Cannot have more than one clustered index.  The clustered index '{0}' already exists."
        // </summary>
        internal static string Model_MultipleClusteredIndex(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.Model_MultipleClusteredIndex, p0);
        }

        // <summary>
        // A string like "The number of sort directions does not match with the number of primary key columns."
        // </summary>
        internal static string Model_PrimaryKeyColumnsAndSortDirectionsDoesNotMatch
        {
            get { return ResourceLoader.GetString(ResourceLoader.Model_PrimaryKeyColumnsAndSortDirectionsDoesNotMatch); }
        }

        // <summary>
        // A string like "The constraint '{0}' already exists."
        // </summary>
        internal static string Model_DuplicateConstraintName(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.Model_DuplicateConstraintName, p0);
        }

        // <summary>
        // A string like "The columns cannot be empty."
        // </summary>
        internal static string Model_EmptyColumns
        {
            get { return ResourceLoader.GetString(ResourceLoader.Model_EmptyColumns); }
        }

        // <summary>
        // A string like "The FROM clause is empty."
        // </summary>
        internal static string DbQueryBuilder_EmptyFrom
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_EmptyFrom); }
        }

        // <summary>
        // A string like "The reference table model is invalid. It must either be a self reference or a reference to a existing table."
        // </summary>
        internal static string Model_InvalidRefTableModel
        {
            get { return ResourceLoader.GetString(ResourceLoader.Model_InvalidRefTableModel); }
        }

        // <summary>
        // A string like "The DataSource must be null."
        // </summary>
        internal static string DbQueryBuilder_VerifyToSet_DataSourceNotNull
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_VerifyToSet_DataSourceNotNull); }
        }

        // <summary>
        // A string like "The DataSourceKind of the parent model must be '{0}'."
        // </summary>
        internal static string DbQueryBuilder_VerifyToSet_InvalidParentModelDataSourceKind(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbQueryBuilder_VerifyToSet_InvalidParentModelDataSourceKind, p0);
        }

        // <summary>
        // A string like "The child DbSet has been created already."
        // </summary>
        internal static string DbSet_VerifyCreateChild_AlreadyCreated
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbSet_VerifyCreateChild_AlreadyCreated); }
        }

        // <summary>
        // A string like "Creating child DbSet on DbTable is not allowed."
        // </summary>
        internal static string DbSet_VerifyCreateChild_InvalidDataSourceKind
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbSet_VerifyCreateChild_InvalidDataSourceKind); }
        }

        // <summary>
        // A string like "Cannot access values of the column. The column must belong to a dataset."
        // </summary>
        internal static string Column_NullValueManager
        {
            get { return ResourceLoader.GetString(ResourceLoader.Column_NullValueManager); }
        }

        // <summary>
        // A string like "Cannot set value of readonly column. The column is part of the primary key or child-parent relationship."
        // </summary>
        internal static string Column_SetReadOnlyValue
        {
            get { return ResourceLoader.GetString(ResourceLoader.Column_SetReadOnlyValue); }
        }

        // <summary>
        // A string like "The column[{0}] '{1}' is not supported by this DbSession."
        // </summary>
        internal static string DbSession_ColumnNotSupported(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.DbSession_ColumnNotSupported, p0, p1);
        }

        // <summary>
        // A string like "Reached EOF unexpectedly."
        // </summary>
        internal static string JsonParser_UnexpectedEof
        {
            get { return ResourceLoader.GetString(ResourceLoader.JsonParser_UnexpectedEof); }
        }

        // <summary>
        // A string like "Invalid char '{0}' at index {1}."
        // </summary>
        internal static string JsonParser_InvalidChar(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.JsonParser_InvalidChar, p0, p1);
        }

        // <summary>
        // A string like "Char '{0}' at index {1} is not a valid hex number."
        // </summary>
        internal static string JsonParser_InvalidHexChar(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.JsonParser_InvalidHexChar, p0, p1);
        }

        // <summary>
        // A string like "'{0}' expected at index {1}."
        // </summary>
        internal static string JsonParser_InvalidLiteral(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.JsonParser_InvalidLiteral, p0, p1);
        }

        // <summary>
        // A string like "Invalid string escape '{0}' at index {1}."
        // </summary>
        internal static string JsonParser_InvalidStringEscape(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.JsonParser_InvalidStringEscape, p0, p1);
        }

        // <summary>
        // A string like "Invalid member name '{0}' for Model {1}."
        // </summary>
        internal static string JsonParser_InvalidModelMember(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.JsonParser_InvalidModelMember, p0, p1);
        }

        // <summary>
        // A string like "Cannot deserialize from JSON value. Provided JSON value must be 'true', 'false' or 'null'."
        // </summary>
        internal static string BooleanColumn_CannotDeserialize
        {
            get { return ResourceLoader.GetString(ResourceLoader.BooleanColumn_CannotDeserialize); }
        }

        // <summary>
        // A string like "Current token kind {0} is invalid. Expected token kind: {1}."
        // </summary>
        internal static string JsonParser_InvalidTokenKind(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.JsonParser_InvalidTokenKind, p0, p1);
        }

        // <summary>
        // A string like "The DataSource is null."
        // </summary>
        internal static string DbTable_NullDataSource
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbTable_NullDataSource); }
        }

        // <summary>
        // A string like "The ColumnMapping list is empty."
        // </summary>
        internal static string DbTable_VerifyColumnMappings_Empty
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbTable_VerifyColumnMappings_Empty); }
        }

        // <summary>
        // A string like "The source column derives from invalid model '{0}'."
        // </summary>
        internal static string ColumnMappingsBuilder_InvalidSourceParentModelSet(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.ColumnMappingsBuilder_InvalidSourceParentModelSet, p0);
        }

        // <summary>
        // A string like "The target column is invalid."
        // </summary>
        internal static string ColumnMappingsBuilder_InvalidTarget
        {
            get { return ResourceLoader.GetString(ResourceLoader.ColumnMappingsBuilder_InvalidTarget); }
        }

        // <summary>
        // A string like "Cannot match primary key of current table and the source Model."
        // </summary>
        internal static string DbTable_GetKeyMappings_CannotMatch
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbTable_GetKeyMappings_CannotMatch); }
        }

        // <summary>
        // A string like "The operation is not supported by readonly list."
        // </summary>
        internal static string NotSupportedByReadOnlyList
        {
            get { return ResourceLoader.GetString(ResourceLoader.NotSupportedByReadOnlyList); }
        }

        // <summary>
        // A string like "Circular reference detected for table '{0}'."
        // </summary>
        internal static string MockDb_CircularReference(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.MockDb_CircularReference, p0);
        }

        // <summary>
        // A string like "The table '{0}' cannot be mocked twice."
        // </summary>
        internal static string MockDb_DuplicateTable(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.MockDb_DuplicateTable, p0);
        }

        // <summary>
        // A string like "DbMock object cannot be initialized twice."
        // </summary>
        internal static string MockDb_InitializeTwice
        {
            get { return ResourceLoader.GetString(ResourceLoader.MockDb_InitializeTwice); }
        }

        // <summary>
        // A string like "The mocking table is invalid. It must belong to the giving DbSession."
        // </summary>
        internal static string MockDb_InvalidTable
        {
            get { return ResourceLoader.GetString(ResourceLoader.MockDb_InvalidTable); }
        }

        // <summary>
        // A string like "Mock can only be called during initialization."
        // </summary>
        internal static string MockDb_MockOnlyAllowedDuringInitialization
        {
            get { return ResourceLoader.GetString(ResourceLoader.MockDb_MockOnlyAllowedDuringInitialization); }
        }

        // <summary>
        // A string like "The type argument '{0}' does not match with type argument '{1}' used for for table '{2}'."
        // </summary>
        internal static string MockDb_ModelTypeMismatch(object p0, object p1, object p2)
        {
            return ResourceLoader.GetString(ResourceLoader.MockDb_ModelTypeMismatch, p0, p1, p2);
        }

        // <summary>
        // A string like "The provided foreign key is not valid. It must be child of this model."
        // </summary>
        internal static string Model_InvalidForeignKey
        {
            get { return ResourceLoader.GetString(ResourceLoader.Model_InvalidForeignKey); }
        }

        // <summary>
        // A string like "The returned where expression is invalid."
        // </summary>
        internal static string DbTable_VerifyWhere
        {
            get { return ResourceLoader.GetString(ResourceLoader.DbTable_VerifyWhere); }
        }

        // <summary>
        // A string like "The child column '{0}' does not exist in the column mappings."
        // </summary>
        internal static string ChildColumnNotExistInColumnMappings(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.ChildColumnNotExistInColumnMappings, p0);
        }

        // <summary>
        // A string like "The operation requires a primary key of model '{0}'."
        // </summary>
        internal static string DbTable_NoPrimaryKey(object p0)
        {
            return ResourceLoader.GetString(ResourceLoader.DbTable_NoPrimaryKey, p0);
        }

        // <summary>
        // A string like "The source column's data type '{0}' is invalid. Data type '{1}' required."
        // </summary>
        internal static string ColumnMappingsBuilder_InvalidSourceDataType(object p0, object p1)
        {
            return ResourceLoader.GetString(ResourceLoader.ColumnMappingsBuilder_InvalidSourceDataType, p0, p1);
        }

        // <summary>
        // A string like "No ColumnMapping specified."
        // </summary>
        internal static string ColumnMappingsBuilder_NoColumnMapping
        {
            get { return ResourceLoader.GetString(ResourceLoader.ColumnMappingsBuilder_NoColumnMapping); }
        }
    }

    // <summary>
    // Strongly-typed and parameterized exception factory.
    // </summary>
    [GeneratedCode("Resources.tt", "1.0.0.0")]
    internal static class Error
    {
        // <summary>
        // InvalidOperationException with message like "Cannot register accessor for type '{0}' after an instance of this type or its derived type has been created."
        // </summary>
        internal static Exception Accessor_RegisterAfterUse(object p0)
        {
            return new InvalidOperationException(Strings.Accessor_RegisterAfterUse(p0));
        }

        // <summary>
        // InvalidOperationException with message like "The accessor with OwnerType '{0}' and Name '{1}' has been registered already."
        // </summary>
        internal static Exception Accessor_RegisterDuplicate(object p0, object p1)
        {
            return new InvalidOperationException(Strings.Accessor_RegisterDuplicate(p0, p1));
        }

        // <summary>
        // InvalidOperationException with message like "Cannot call When after Else has been called."
        // </summary>
        internal static Exception Case_WhenAfterElse()
        {
            return new InvalidOperationException(Strings.Case_WhenAfterElse);
        }

        // <summary>
        // InvalidOperationException with message like "Cannot evaluate a non DataSet column: Column={0}, DataSource.Kind={1}."
        // </summary>
        internal static Exception ColumnAggregateFunction_EvalOnNonDataSet(object p0, object p1)
        {
            return new InvalidOperationException(Strings.ColumnAggregateFunction_EvalOnNonDataSet(p0, p1));
        }

        // <summary>
        // InvalidOperationException with message like "Duplicate ColumnKey is not allowed: OriginalOwnerType={0}, OriginalName={1}."
        // </summary>
        internal static Exception ColumnCollection_DuplicateColumnKey(object p0, object p1)
        {
            return new InvalidOperationException(Strings.ColumnCollection_DuplicateColumnKey(p0, p1));
        }

        // <summary>
        // InvalidOperationException with message like "The class {0} is not implemented correctly. The column getter "{1}" returns null."
        // </summary>
        internal static Exception ColumnGroup_GetterReturnsNull(object p0, object p1)
        {
            return new InvalidOperationException(Strings.ColumnGroup_GetterReturnsNull(p0, p1));
        }

        // <summary>
        // InvalidOperationException with message like "The class {0} is not implemented correctly. The parent models of column "{1}" and "{2}" are inconsistent."
        // </summary>
        internal static Exception ColumnGroup_InconsistentParentModel(object p0, object p1, object p2)
        {
            return new InvalidOperationException(Strings.ColumnGroup_InconsistentParentModel(p0, p1, p2));
        }

        // <summary>
        // InvalidOperationException with message like "The expression cannot be set to a column owned by a model."
        // </summary>
        internal static Exception Column_ExpressionModelProperty()
        {
            return new InvalidOperationException(Strings.Column_ExpressionModelProperty);
        }

        // <summary>
        // InvalidOperationException with message like "The column's Expression exists and cannot be overwrite."
        // </summary>
        internal static Exception Column_ExpressionOverwrite()
        {
            return new InvalidOperationException(Strings.Column_ExpressionOverwrite);
        }

        // <summary>
        // InvalidOperationException with message like "Cannot call From method multiple times."
        // </summary>
        internal static Exception DbQueryBuilder_DuplicateFrom()
        {
            return new InvalidOperationException(Strings.DbQueryBuilder_DuplicateFrom);
        }

        // <summary>
        // InvalidOperationException with message like "The class {0} is not correctly implemented. The override of GetPrimaryKeyOverride should not return null."
        // </summary>
        internal static Exception Model_GetPrimaryKeyOverrideReturnsNull(object p0)
        {
            return new InvalidOperationException(Strings.Model_GetPrimaryKeyOverrideReturnsNull(p0));
        }

        // <summary>
        // InvalidOperationException with message like "The operation is only allowed in design mode."
        // </summary>
        internal static Exception VerifyDesignMode()
        {
            return new InvalidOperationException(Strings.VerifyDesignMode);
        }

        // <summary>
        // InvalidOperationException with message like "Cannot define multiple identity column on the same table."
        // </summary>
        internal static Exception Model_MultipleIdentityColumn()
        {
            return new InvalidOperationException(Strings.Model_MultipleIdentityColumn);
        }

        // <summary>
        // InvalidOperationException with message like "Cannot have more than one clustered index.  The clustered index '{0}' already exists."
        // </summary>
        internal static Exception Model_MultipleClusteredIndex(object p0)
        {
            return new InvalidOperationException(Strings.Model_MultipleClusteredIndex(p0));
        }

        // <summary>
        // InvalidOperationException with message like "The constraint '{0}' already exists."
        // </summary>
        internal static Exception Model_DuplicateConstraintName(object p0)
        {
            return new InvalidOperationException(Strings.Model_DuplicateConstraintName(p0));
        }

        // <summary>
        // InvalidOperationException with message like "The FROM clause is empty."
        // </summary>
        internal static Exception DbQueryBuilder_EmptyFrom()
        {
            return new InvalidOperationException(Strings.DbQueryBuilder_EmptyFrom);
        }

        // <summary>
        // InvalidOperationException with message like "The DataSource must be null."
        // </summary>
        internal static Exception DbQueryBuilder_VerifyToSet_DataSourceNotNull()
        {
            return new InvalidOperationException(Strings.DbQueryBuilder_VerifyToSet_DataSourceNotNull);
        }

        // <summary>
        // InvalidOperationException with message like "The DataSourceKind of the parent model must be '{0}'."
        // </summary>
        internal static Exception DbQueryBuilder_VerifyToSet_InvalidParentModelDataSourceKind(object p0)
        {
            return new InvalidOperationException(Strings.DbQueryBuilder_VerifyToSet_InvalidParentModelDataSourceKind(p0));
        }

        // <summary>
        // InvalidOperationException with message like "The child DbSet has been created already."
        // </summary>
        internal static Exception DbSet_VerifyCreateChild_AlreadyCreated()
        {
            return new InvalidOperationException(Strings.DbSet_VerifyCreateChild_AlreadyCreated);
        }

        // <summary>
        // InvalidOperationException with message like "Creating child DbSet on DbTable is not allowed."
        // </summary>
        internal static Exception DbSet_VerifyCreateChild_InvalidDataSourceKind()
        {
            return new InvalidOperationException(Strings.DbSet_VerifyCreateChild_InvalidDataSourceKind);
        }

        // <summary>
        // InvalidOperationException with message like "Cannot access values of the column. The column must belong to a dataset."
        // </summary>
        internal static Exception Column_NullValueManager()
        {
            return new InvalidOperationException(Strings.Column_NullValueManager);
        }

        // <summary>
        // InvalidOperationException with message like "Cannot set value of readonly column. The column is part of the primary key or child-parent relationship."
        // </summary>
        internal static Exception Column_SetReadOnlyValue()
        {
            return new InvalidOperationException(Strings.Column_SetReadOnlyValue);
        }

        // <summary>
        // InvalidOperationException with message like "The column[{0}] '{1}' is not supported by this DbSession."
        // </summary>
        internal static Exception DbSession_ColumnNotSupported(object p0, object p1)
        {
            return new InvalidOperationException(Strings.DbSession_ColumnNotSupported(p0, p1));
        }

        // <summary>
        // FormatException with message like "Reached EOF unexpectedly."
        // </summary>
        internal static Exception JsonParser_UnexpectedEof()
        {
            return new FormatException(Strings.JsonParser_UnexpectedEof);
        }

        // <summary>
        // FormatException with message like "Invalid char '{0}' at index {1}."
        // </summary>
        internal static Exception JsonParser_InvalidChar(object p0, object p1)
        {
            return new FormatException(Strings.JsonParser_InvalidChar(p0, p1));
        }

        // <summary>
        // FormatException with message like "Char '{0}' at index {1} is not a valid hex number."
        // </summary>
        internal static Exception JsonParser_InvalidHexChar(object p0, object p1)
        {
            return new FormatException(Strings.JsonParser_InvalidHexChar(p0, p1));
        }

        // <summary>
        // FormatException with message like "'{0}' expected at index {1}."
        // </summary>
        internal static Exception JsonParser_InvalidLiteral(object p0, object p1)
        {
            return new FormatException(Strings.JsonParser_InvalidLiteral(p0, p1));
        }

        // <summary>
        // FormatException with message like "Invalid string escape '{0}' at index {1}."
        // </summary>
        internal static Exception JsonParser_InvalidStringEscape(object p0, object p1)
        {
            return new FormatException(Strings.JsonParser_InvalidStringEscape(p0, p1));
        }

        // <summary>
        // FormatException with message like "Invalid member name '{0}' for Model {1}."
        // </summary>
        internal static Exception JsonParser_InvalidModelMember(object p0, object p1)
        {
            return new FormatException(Strings.JsonParser_InvalidModelMember(p0, p1));
        }

        // <summary>
        // FormatException with message like "Cannot deserialize from JSON value. Provided JSON value must be 'true', 'false' or 'null'."
        // </summary>
        internal static Exception BooleanColumn_CannotDeserialize()
        {
            return new FormatException(Strings.BooleanColumn_CannotDeserialize);
        }

        // <summary>
        // FormatException with message like "Current token kind {0} is invalid. Expected token kind: {1}."
        // </summary>
        internal static Exception JsonParser_InvalidTokenKind(object p0, object p1)
        {
            return new FormatException(Strings.JsonParser_InvalidTokenKind(p0, p1));
        }

        // <summary>
        // InvalidOperationException with message like "Cannot match primary key of current table and the source Model."
        // </summary>
        internal static Exception DbTable_GetKeyMappings_CannotMatch()
        {
            return new InvalidOperationException(Strings.DbTable_GetKeyMappings_CannotMatch);
        }

        // <summary>
        // NotSupportedException with message like "The operation is not supported by readonly list."
        // </summary>
        internal static Exception NotSupportedByReadOnlyList()
        {
            return new NotSupportedException(Strings.NotSupportedByReadOnlyList);
        }

        // <summary>
        // InvalidOperationException with message like "Circular reference detected for table '{0}'."
        // </summary>
        internal static Exception MockDb_CircularReference(object p0)
        {
            return new InvalidOperationException(Strings.MockDb_CircularReference(p0));
        }

        // <summary>
        // InvalidOperationException with message like "DbMock object cannot be initialized twice."
        // </summary>
        internal static Exception MockDb_InitializeTwice()
        {
            return new InvalidOperationException(Strings.MockDb_InitializeTwice);
        }

        // <summary>
        // InvalidOperationException with message like "Mock can only be called during initialization."
        // </summary>
        internal static Exception MockDb_MockOnlyAllowedDuringInitialization()
        {
            return new InvalidOperationException(Strings.MockDb_MockOnlyAllowedDuringInitialization);
        }

        // <summary>
        // ArgumentException with message like "The type argument '{0}' does not match with type argument '{1}' used for for table '{2}'."
        // </summary>
        internal static Exception MockDb_ModelTypeMismatch(object p0, object p1, object p2)
        {
            return new ArgumentException(Strings.MockDb_ModelTypeMismatch(p0, p1, p2));
        }

        // <summary>
        // InvalidOperationException with message like "The child column '{0}' does not exist in the column mappings."
        // </summary>
        internal static Exception ChildColumnNotExistInColumnMappings(object p0)
        {
            return new InvalidOperationException(Strings.ChildColumnNotExistInColumnMappings(p0));
        }

        // <summary>
        // InvalidOperationException with message like "The operation requires a primary key of model '{0}'."
        // </summary>
        internal static Exception DbTable_NoPrimaryKey(object p0)
        {
            return new InvalidOperationException(Strings.DbTable_NoPrimaryKey(p0));
        }

        // <summary>
        // InvalidOperationException with message like "No ColumnMapping specified."
        // </summary>
        internal static Exception ColumnMappingsBuilder_NoColumnMapping()
        {
            return new InvalidOperationException(Strings.ColumnMappingsBuilder_NoColumnMapping);
        }

        // <summary>
        // The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
        // </summary>
        internal static Exception Argument(string message, string paramName)
        {
            return new ArgumentException(message, paramName);
        }

        // <summary>
        // The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
        // </summary>
        internal static Exception ArgumentOutOfRange(string paramName)
        {
            return new ArgumentOutOfRangeException(paramName);
        }
    }

    // <summary>
    // AutoGenerated resource class. Usage:
    // string s = ResourceLoader.GetString(ResourceLoader.MyIdenfitier);
    // </summary>
    [GeneratedCode("Resources.tt", "1.0.0.0")]
    internal sealed class ResourceLoader
    {
        internal const string Accessor_InvalidGetter = "Accessor_InvalidGetter";
        internal const string Accessor_RegisterAfterUse = "Accessor_RegisterAfterUse";
        internal const string Accessor_RegisterDuplicate = "Accessor_RegisterDuplicate";
        internal const string ArgumentIsNullOrWhitespace = "ArgumentIsNullOrWhitespace";
        internal const string Case_WhenAfterElse = "Case_WhenAfterElse";
        internal const string ColumnAggregateFunction_EvalOnNonDataSet = "ColumnAggregateFunction_EvalOnNonDataSet";
        internal const string ColumnAggregateFunction_NestedAggregate = "ColumnAggregateFunction_NestedAggregate";
        internal const string ColumnAggregateFunction_NoModelChain = "ColumnAggregateFunction_NoModelChain";
        internal const string ColumnCollection_DuplicateColumnKey = "ColumnCollection_DuplicateColumnKey";
        internal const string GenericInvoker_GetMethodInfo = "GenericInvoker_GetMethodInfo";
        internal const string GenericInvoker_TypeResolverReturnsNull = "GenericInvoker_TypeResolverReturnsNull";
        internal const string ColumnGroup_GetterReturnsNull = "ColumnGroup_GetterReturnsNull";
        internal const string ColumnGroup_InconsistentParentModel = "ColumnGroup_InconsistentParentModel";
        internal const string Column_ExpressionAlreadyAttached = "Column_ExpressionAlreadyAttached";
        internal const string Column_ExpressionModelProperty = "Column_ExpressionModelProperty";
        internal const string Column_ExpressionOverwrite = "Column_ExpressionOverwrite";
        internal const string Column_VerifyDataRow = "Column_VerifyDataRow";
        internal const string Column_VerifyDbReader = "Column_VerifyDbReader";
        internal const string DbLogger_CommandCanceled = "DbLogger_CommandCanceled";
        internal const string DbLogger_CommandComplete = "DbLogger_CommandComplete";
        internal const string DbLogger_CommandExecuting = "DbLogger_CommandExecuting";
        internal const string DbLogger_CommandExecutingAsync = "DbLogger_CommandExecutingAsync";
        internal const string DbLogger_CommandFailed = "DbLogger_CommandFailed";
        internal const string DbLogger_ConnectionClosed = "DbLogger_ConnectionClosed";
        internal const string DbLogger_ConnectionCloseError = "DbLogger_ConnectionCloseError";
        internal const string DbLogger_ConnectionOpen = "DbLogger_ConnectionOpen";
        internal const string DbLogger_ConnectionOpenAsync = "DbLogger_ConnectionOpenAsync";
        internal const string DbLogger_ConnectionOpenCanceled = "DbLogger_ConnectionOpenCanceled";
        internal const string DbLogger_ConnectionOpenError = "DbLogger_ConnectionOpenError";
        internal const string DbLogger_ConnectionOpenErrorAsync = "DbLogger_ConnectionOpenErrorAsync";
        internal const string DbLogger_TransactionCommitError = "DbLogger_TransactionCommitError";
        internal const string DbLogger_TransactionCommitted = "DbLogger_TransactionCommitted";
        internal const string DbLogger_TransactionRollbackError = "DbLogger_TransactionRollbackError";
        internal const string DbLogger_TransactionRolledBack = "DbLogger_TransactionRolledBack";
        internal const string DbLogger_TransactionStarted = "DbLogger_TransactionStarted";
        internal const string DbLogger_TransactionStartError = "DbLogger_TransactionStartError";
        internal const string DbQueryBuilder_DuplicateFrom = "DbQueryBuilder_DuplicateFrom";
        internal const string DbQueryBuilder_Join_InvalidLeftKey = "DbQueryBuilder_Join_InvalidLeftKey";
        internal const string DbQueryBuilder_Join_InvalidRightKey = "DbQueryBuilder_Join_InvalidRightKey";
        internal const string DbQueryBuilder_VerifyChildModel = "DbQueryBuilder_VerifyChildModel";
        internal const string DbQueryBuilder_VerifyModel = "DbQueryBuilder_VerifyModel";
        internal const string DbQueryBuilder_VerifySourceColumnAggregateModels = "DbQueryBuilder_VerifySourceColumnAggregateModels";
        internal const string DbQueryBuilder_VerifySourceColumnParentModels = "DbQueryBuilder_VerifySourceColumnParentModels";
        internal const string DbQueryBuilder_VerifyTargetColumn = "DbQueryBuilder_VerifyTargetColumn";
        internal const string InvalidChildModel = "InvalidChildModel";
        internal const string InvalidChildModelGetter = "InvalidChildModelGetter";
        internal const string InvalidColumnGetter = "InvalidColumnGetter";
        internal const string Model_GetPrimaryKeyOverrideReturnsNull = "Model_GetPrimaryKeyOverrideReturnsNull";
        internal const string Model_InvalidIdentityIncrement = "Model_InvalidIdentityIncrement";
        internal const string Model_VerifyChildColumn = "Model_VerifyChildColumn";
        internal const string VerifyDesignMode = "VerifyDesignMode";
        internal const string Model_MultipleIdentityColumn = "Model_MultipleIdentityColumn";
        internal const string Model_MultipleClusteredIndex = "Model_MultipleClusteredIndex";
        internal const string Model_PrimaryKeyColumnsAndSortDirectionsDoesNotMatch = "Model_PrimaryKeyColumnsAndSortDirectionsDoesNotMatch";
        internal const string Model_DuplicateConstraintName = "Model_DuplicateConstraintName";
        internal const string Model_EmptyColumns = "Model_EmptyColumns";
        internal const string DbQueryBuilder_EmptyFrom = "DbQueryBuilder_EmptyFrom";
        internal const string Model_InvalidRefTableModel = "Model_InvalidRefTableModel";
        internal const string DbQueryBuilder_VerifyToSet_DataSourceNotNull = "DbQueryBuilder_VerifyToSet_DataSourceNotNull";
        internal const string DbQueryBuilder_VerifyToSet_InvalidParentModelDataSourceKind = "DbQueryBuilder_VerifyToSet_InvalidParentModelDataSourceKind";
        internal const string DbSet_VerifyCreateChild_AlreadyCreated = "DbSet_VerifyCreateChild_AlreadyCreated";
        internal const string DbSet_VerifyCreateChild_InvalidDataSourceKind = "DbSet_VerifyCreateChild_InvalidDataSourceKind";
        internal const string Column_NullValueManager = "Column_NullValueManager";
        internal const string Column_SetReadOnlyValue = "Column_SetReadOnlyValue";
        internal const string DbSession_ColumnNotSupported = "DbSession_ColumnNotSupported";
        internal const string JsonParser_UnexpectedEof = "JsonParser_UnexpectedEof";
        internal const string JsonParser_InvalidChar = "JsonParser_InvalidChar";
        internal const string JsonParser_InvalidHexChar = "JsonParser_InvalidHexChar";
        internal const string JsonParser_InvalidLiteral = "JsonParser_InvalidLiteral";
        internal const string JsonParser_InvalidStringEscape = "JsonParser_InvalidStringEscape";
        internal const string JsonParser_InvalidModelMember = "JsonParser_InvalidModelMember";
        internal const string BooleanColumn_CannotDeserialize = "BooleanColumn_CannotDeserialize";
        internal const string JsonParser_InvalidTokenKind = "JsonParser_InvalidTokenKind";
        internal const string DbTable_NullDataSource = "DbTable_NullDataSource";
        internal const string DbTable_VerifyColumnMappings_Empty = "DbTable_VerifyColumnMappings_Empty";
        internal const string ColumnMappingsBuilder_InvalidSourceParentModelSet = "ColumnMappingsBuilder_InvalidSourceParentModelSet";
        internal const string ColumnMappingsBuilder_InvalidTarget = "ColumnMappingsBuilder_InvalidTarget";
        internal const string DbTable_GetKeyMappings_CannotMatch = "DbTable_GetKeyMappings_CannotMatch";
        internal const string NotSupportedByReadOnlyList = "NotSupportedByReadOnlyList";
        internal const string MockDb_CircularReference = "MockDb_CircularReference";
        internal const string MockDb_DuplicateTable = "MockDb_DuplicateTable";
        internal const string MockDb_InitializeTwice = "MockDb_InitializeTwice";
        internal const string MockDb_InvalidTable = "MockDb_InvalidTable";
        internal const string MockDb_MockOnlyAllowedDuringInitialization = "MockDb_MockOnlyAllowedDuringInitialization";
        internal const string MockDb_ModelTypeMismatch = "MockDb_ModelTypeMismatch";
        internal const string Model_InvalidForeignKey = "Model_InvalidForeignKey";
        internal const string DbTable_VerifyWhere = "DbTable_VerifyWhere";
        internal const string ChildColumnNotExistInColumnMappings = "ChildColumnNotExistInColumnMappings";
        internal const string DbTable_NoPrimaryKey = "DbTable_NoPrimaryKey";
        internal const string ColumnMappingsBuilder_InvalidSourceDataType = "ColumnMappingsBuilder_InvalidSourceDataType";
        internal const string ColumnMappingsBuilder_NoColumnMapping = "ColumnMappingsBuilder_NoColumnMapping";

        private static ResourceLoader loader;
        private readonly ResourceManager resources;

        private ResourceLoader()
        {
            resources = new ResourceManager("DevZest.Data.Properties.Resources", typeof(ResourceLoader).GetTypeInfo().Assembly);
        }

        private static ResourceLoader GetLoader()
        {
            if (loader == null)
            {
                var sr = new ResourceLoader();
                Interlocked.CompareExchange(ref loader, sr, null);
            }
            return loader;
        }

        private static CultureInfo Culture
        {
            get { return null /*use ResourceManager default, CultureInfo.CurrentUICulture*/; }
        }

        public static ResourceManager Resources
        {
            get { return GetLoader().resources; }
        }

        public static string GetString(string name, params object[] args)
        {
            var sys = GetLoader();
            if (sys == null)
            {
                return null;
            }

            var res = sys.resources.GetString(name, Culture);

            if (args != null
                && args.Length > 0)
            {
                for (var i = 0; i < args.Length; i ++)
                {
                    var value = args[i] as String;
                    if (value != null
                        && value.Length > 1024)
                    {
                        args[i] = value.Substring(0, 1024 - 3) + "...";
                    }
                }
                return String.Format(CultureInfo.CurrentCulture, res, args);
            }
            else
            {
                return res;
            }
        }

        public static string GetString(string name)
        {
            var sys = GetLoader();
            if (sys == null)
            {
                return null;
            }
            return sys.resources.GetString(name, Culture);
        }
    }
}
