// <auto-generated />
namespace DevZest.Data
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("DevZest.Data.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The provided getter expression is invalid.
        /// </summary>
        public static string Accessor_InvalidGetter
        {
            get { return GetString("Accessor_InvalidGetter"); }
        }

        /// <summary>
        /// Cannot register accessor for type '{0}' after an instance of this type or its derived type has been created.
        /// </summary>
        public static string Accessor_RegisterAfterUse(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Accessor_RegisterAfterUse"), p0);
        }

        /// <summary>
        /// The accessor with OwnerType '{0}' and Name '{1}' has been registered already.
        /// </summary>
        public static string Accessor_RegisterDuplicate(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Accessor_RegisterDuplicate"), p0, p1);
        }

        /// <summary>
        /// The argument '{0}' cannot be null, empty or contain only white space.
        /// </summary>
        public static string ArgumentIsNullOrWhitespace(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsNullOrWhitespace"), p0);
        }

        /// <summary>
        /// Cannot call When after Else has been called.
        /// </summary>
        public static string Case_WhenAfterElse
        {
            get { return GetString("Case_WhenAfterElse"); }
        }

        /// <summary>
        /// Cannot evaluate a non DataSet column: Column={0}, DataSource.Kind={1}.
        /// </summary>
        public static string ColumnAggregateFunction_EvalOnNonDataSet(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ColumnAggregateFunction_EvalOnNonDataSet"), p0, p1);
        }

        /// <summary>
        /// Aggregate function cannot be nested.
        /// </summary>
        public static string ColumnAggregateFunction_NestedAggregate
        {
            get { return GetString("ColumnAggregateFunction_NestedAggregate"); }
        }

        /// <summary>
        /// Cannot resolve model chain from Column "{0}" to provided dataRow.
        /// </summary>
        public static string ColumnAggregateFunction_NoModelChain(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ColumnAggregateFunction_NoModelChain"), p0);
        }

        /// <summary>
        /// Duplicate ColumnKey is not allowed: OriginalOwnerType={0}, OriginalName={1}.
        /// </summary>
        public static string ColumnCollection_DuplicateColumnKey(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ColumnCollection_DuplicateColumnKey"), p0, p1);
        }

        /// <summary>
        /// Cannot get method info: Type={0}, MethodName={1}.
        /// </summary>
        public static string GenericInvoker_GetMethodInfo(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("GenericInvoker_GetMethodInfo"), p0, p1);
        }

        /// <summary>
        /// The type resolver callback returns null.
        /// </summary>
        public static string GenericInvoker_TypeResolverReturnsNull
        {
            get { return GetString("GenericInvoker_TypeResolverReturnsNull"); }
        }

        /// <summary>
        /// The class {0} is not implemented correctly. The column getter "{1}" returns null.
        /// </summary>
        public static string ColumnGroup_GetterReturnsNull(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ColumnGroup_GetterReturnsNull"), p0, p1);
        }

        /// <summary>
        /// The class {0} is not implemented correctly. The parent models of column "{1}" and "{2}" are inconsistent.
        /// </summary>
        public static string ColumnGroup_InconsistentParentModel(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ColumnGroup_InconsistentParentModel"), p0, p1, p2);
        }

        /// <summary>
        /// The expression is already attached to a Column.
        /// </summary>
        public static string Column_ExpressionAlreadyAttached
        {
            get { return GetString("Column_ExpressionAlreadyAttached"); }
        }

        /// <summary>
        /// The expression cannot be set to a column owned by a model.
        /// </summary>
        public static string Column_ExpressionModelProperty
        {
            get { return GetString("Column_ExpressionModelProperty"); }
        }

        /// <summary>
        /// The column's Expression exists and cannot be overwrite.
        /// </summary>
        public static string Column_ExpressionOverwrite
        {
            get { return GetString("Column_ExpressionOverwrite"); }
        }

        /// <summary>
        /// The Model of the given DataRow must be the same as this column's ParentModel.
        /// </summary>
        public static string Column_VerifyDataRow
        {
            get { return GetString("Column_VerifyDataRow"); }
        }

        /// <summary>
        /// The Model of the given DbReader parameter must be the same as this column's ParentModel.
        /// </summary>
        public static string Column_VerifyDbReader
        {
            get { return GetString("Column_VerifyDbReader"); }
        }

        /// <summary>
        /// -- Canceled in {0} ms
        /// </summary>
        public static string DbLogger_CommandCanceled(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_CommandCanceled"), p0);
        }

        /// <summary>
        /// -- Completed in {0} ms with result: {1}
        /// </summary>
        public static string DbLogger_CommandComplete(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_CommandComplete"), p0, p1);
        }

        /// <summary>
        /// -- Executing at {0}
        /// </summary>
        public static string DbLogger_CommandExecuting(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_CommandExecuting"), p0);
        }

        /// <summary>
        /// -- Executing asynchronously at {0}
        /// </summary>
        public static string DbLogger_CommandExecutingAsync(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_CommandExecutingAsync"), p0);
        }

        /// <summary>
        /// -- Failed in {0} ms with error: {1}
        /// </summary>
        public static string DbLogger_CommandFailed(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_CommandFailed"), p0, p1);
        }

        /// <summary>
        /// Closed connection at {0}
        /// </summary>
        public static string DbLogger_ConnectionClosed(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_ConnectionClosed"), p0);
        }

        /// <summary>
        /// Failed to close connection at {0} with error: {1}
        /// </summary>
        public static string DbLogger_ConnectionCloseError(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_ConnectionCloseError"), p0, p1);
        }

        /// <summary>
        /// Opened connection at {0}
        /// </summary>
        public static string DbLogger_ConnectionOpen(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_ConnectionOpen"), p0);
        }

        /// <summary>
        /// Opened connection asynchronously at {0}
        /// </summary>
        public static string DbLogger_ConnectionOpenAsync(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_ConnectionOpenAsync"), p0);
        }

        /// <summary>
        /// Cancelled open connection at {0}
        /// </summary>
        public static string DbLogger_ConnectionOpenCanceled(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_ConnectionOpenCanceled"), p0);
        }

        /// <summary>
        /// Failed to open connection at {0} with error: {1}
        /// </summary>
        public static string DbLogger_ConnectionOpenError(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_ConnectionOpenError"), p0, p1);
        }

        /// <summary>
        /// Failed to open connection asynchronously at {0} with error: {1}
        /// </summary>
        public static string DbLogger_ConnectionOpenErrorAsync(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_ConnectionOpenErrorAsync"), p0, p1);
        }

        /// <summary>
        /// Failed to commit transaction at {0} with error: {1}
        /// </summary>
        public static string DbLogger_TransactionCommitError(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_TransactionCommitError"), p0, p1);
        }

        /// <summary>
        /// Committed transaction at {0}
        /// </summary>
        public static string DbLogger_TransactionCommitted(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_TransactionCommitted"), p0);
        }

        /// <summary>
        /// Failed to rollback transaction at {0} with error: {1}
        /// </summary>
        public static string DbLogger_TransactionRollbackError(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_TransactionRollbackError"), p0, p1);
        }

        /// <summary>
        /// Rolled back transaction at {0}
        /// </summary>
        public static string DbLogger_TransactionRolledBack(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_TransactionRolledBack"), p0);
        }

        /// <summary>
        /// Started transaction at {0}
        /// </summary>
        public static string DbLogger_TransactionStarted(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_TransactionStarted"), p0);
        }

        /// <summary>
        /// Failed to start transaction at {0} with error: {1}
        /// </summary>
        public static string DbLogger_TransactionStartError(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbLogger_TransactionStartError"), p0, p1);
        }

        /// <summary>
        /// Cannot call From method multiple times.
        /// </summary>
        public static string DbQueryBuilder_DuplicateFrom
        {
            get { return GetString("DbQueryBuilder_DuplicateFrom"); }
        }

        /// <summary>
        /// Invalid left key. Its ParentModel must be previously added as source query.
        /// </summary>
        public static string DbQueryBuilder_Join_InvalidLeftKey
        {
            get { return GetString("DbQueryBuilder_Join_InvalidLeftKey"); }
        }

        /// <summary>
        /// Invalid right key. Its ParentModel must be the same as the provided model parameter.
        /// </summary>
        public static string DbQueryBuilder_Join_InvalidRightKey
        {
            get { return GetString("DbQueryBuilder_Join_InvalidRightKey"); }
        }

        /// <summary>
        /// The child model is invalid. It must be child model of current query builder's Model, and can only be used to create child query builder once.
        /// </summary>
        public static string DbQueryBuilder_VerifyChildModel
        {
            get { return GetString("DbQueryBuilder_VerifyChildModel"); }
        }

        /// <summary>
        /// The model is invalid. Its DataSource.Kind must be DbTable, DbTempTable or DbQuery.
        /// </summary>
        public static string DbQueryBuilder_VerifyModel
        {
            get { return GetString("DbQueryBuilder_VerifyModel"); }
        }

        /// <summary>
        /// Aggregate expression is not supported.
        /// </summary>
        public static string DbQueryBuilder_VerifySourceColumnAggregateModels
        {
            get { return GetString("DbQueryBuilder_VerifySourceColumnAggregateModels"); }
        }

        /// <summary>
        /// The expression contains parent model '{0}' which does not exist in the source queries.
        /// </summary>
        public static string DbQueryBuilder_VerifySourceColumnParentModels(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbQueryBuilder_VerifySourceColumnParentModels"), p0);
        }

        /// <summary>
        /// The target column has been selected already.
        /// </summary>
        public static string DbQueryBuilder_VerifyTargetColumn
        {
            get { return GetString("DbQueryBuilder_VerifyTargetColumn"); }
        }

        /// <summary>
        /// The child model's ParentModel must be the same as this object's Model.
        /// </summary>
        public static string InvalidChildModel
        {
            get { return GetString("InvalidChildModel"); }
        }

        /// <summary>
        /// The child model returned by the getter is invalid. It cannot be null and its ParentModel must be the calling model.
        /// </summary>
        public static string InvalidChildModelGetter
        {
            get { return GetString("InvalidChildModelGetter"); }
        }

        /// <summary>
        /// The column returned by the getter is invalid. It cannot be null and its ParentModel must be the calling Model.
        /// </summary>
        public static string InvalidColumnGetter
        {
            get { return GetString("InvalidColumnGetter"); }
        }

        /// <summary>
        /// The class {0} is not correctly implemented. The override of GetPrimaryKeyOverride should not return null.
        /// </summary>
        public static string Model_GetPrimaryKeyOverrideReturnsNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Model_GetPrimaryKeyOverrideReturnsNull"), p0);
        }

        /// <summary>
        /// The identity increment value cannot be 0.
        /// </summary>
        public static string Model_InvalidIdentityIncrement
        {
            get { return GetString("Model_InvalidIdentityIncrement"); }
        }

        /// <summary>
        /// The column must be child of this model.
        /// </summary>
        public static string Model_VerifyChildColumn
        {
            get { return GetString("Model_VerifyChildColumn"); }
        }

        /// <summary>
        /// The operation is only allowed in design mode.
        /// </summary>
        public static string VerifyDesignMode
        {
            get { return GetString("VerifyDesignMode"); }
        }

        /// <summary>
        /// Cannot define multiple identity column on the same table.
        /// </summary>
        public static string Model_MultipleIdentityColumn
        {
            get { return GetString("Model_MultipleIdentityColumn"); }
        }

        /// <summary>
        /// Cannot have more than one clustered index.  The clustered index '{0}' already exists.
        /// </summary>
        public static string Model_MultipleClusteredIndex(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Model_MultipleClusteredIndex"), p0);
        }

        /// <summary>
        /// The number of sort directions does not match with the number of primary key columns.
        /// </summary>
        public static string Model_PrimaryKeyColumnsAndSortDirectionsDoesNotMatch
        {
            get { return GetString("Model_PrimaryKeyColumnsAndSortDirectionsDoesNotMatch"); }
        }

        /// <summary>
        /// The constraint '{0}' already exists.
        /// </summary>
        public static string Model_DuplicateConstraintName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Model_DuplicateConstraintName"), p0);
        }

        /// <summary>
        /// The columns cannot be empty.
        /// </summary>
        public static string Model_EmptyColumns
        {
            get { return GetString("Model_EmptyColumns"); }
        }

        /// <summary>
        /// The FROM clause is empty.
        /// </summary>
        public static string DbQueryBuilder_EmptyFrom
        {
            get { return GetString("DbQueryBuilder_EmptyFrom"); }
        }

        /// <summary>
        /// The reference table model is invalid. It must either be a self reference or a reference to a existing table.
        /// </summary>
        public static string Model_InvalidRefTableModel
        {
            get { return GetString("Model_InvalidRefTableModel"); }
        }

        /// <summary>
        /// The DataSource must be null.
        /// </summary>
        public static string DbQueryBuilder_VerifyToSet_DataSourceNotNull
        {
            get { return GetString("DbQueryBuilder_VerifyToSet_DataSourceNotNull"); }
        }

        /// <summary>
        /// The DataSourceKind of the parent model must be '{0}'.
        /// </summary>
        public static string DbQueryBuilder_VerifyToSet_InvalidParentModelDataSourceKind(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbQueryBuilder_VerifyToSet_InvalidParentModelDataSourceKind"), p0);
        }

        /// <summary>
        /// The child DbSet has been created already.
        /// </summary>
        public static string DbSet_VerifyCreateChild_AlreadyCreated
        {
            get { return GetString("DbSet_VerifyCreateChild_AlreadyCreated"); }
        }

        /// <summary>
        /// Creating child DbSet on DbTable is not allowed.
        /// </summary>
        public static string DbSet_VerifyCreateChild_InvalidDataSourceKind
        {
            get { return GetString("DbSet_VerifyCreateChild_InvalidDataSourceKind"); }
        }

        /// <summary>
        /// Cannot access values of the column. The column must belong to a dataset.
        /// </summary>
        public static string Column_NullValueManager
        {
            get { return GetString("Column_NullValueManager"); }
        }

        /// <summary>
        /// Cannot set value of readonly column. The column is part of the primary key or child-parent relationship.
        /// </summary>
        public static string Column_SetReadOnlyValue
        {
            get { return GetString("Column_SetReadOnlyValue"); }
        }

        /// <summary>
        /// The column[{0}] '{1}' is not supported by this DbSession.
        /// </summary>
        public static string DbSession_ColumnNotSupported(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbSession_ColumnNotSupported"), p0, p1);
        }

        /// <summary>
        /// Reached EOF unexpectedly.
        /// </summary>
        public static string JsonParser_UnexpectedEof
        {
            get { return GetString("JsonParser_UnexpectedEof"); }
        }

        /// <summary>
        /// Invalid char '{0}' at index {1}.
        /// </summary>
        public static string JsonParser_InvalidChar(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("JsonParser_InvalidChar"), p0, p1);
        }

        /// <summary>
        /// Char '{0}' at index {1} is not a valid hex number.
        /// </summary>
        public static string JsonParser_InvalidHexChar(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("JsonParser_InvalidHexChar"), p0, p1);
        }

        /// <summary>
        /// '{0}' expected at index {1}.
        /// </summary>
        public static string JsonParser_InvalidLiteral(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("JsonParser_InvalidLiteral"), p0, p1);
        }

        /// <summary>
        /// Invalid string escape '{0}' at index {1}.
        /// </summary>
        public static string JsonParser_InvalidStringEscape(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("JsonParser_InvalidStringEscape"), p0, p1);
        }

        /// <summary>
        /// Invalid member name '{0}' for Model {1}.
        /// </summary>
        public static string JsonParser_InvalidModelMember(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("JsonParser_InvalidModelMember"), p0, p1);
        }

        /// <summary>
        /// Cannot deserialize from JSON value. Provided JSON value must be 'true', 'false' or 'null'.
        /// </summary>
        public static string BooleanColumn_CannotDeserialize
        {
            get { return GetString("BooleanColumn_CannotDeserialize"); }
        }

        /// <summary>
        /// Current token kind {0} is invalid. Expected token kind: {1}.
        /// </summary>
        public static string JsonParser_InvalidTokenKind(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("JsonParser_InvalidTokenKind"), p0, p1);
        }

        /// <summary>
        /// The DataSource is null.
        /// </summary>
        public static string DbTable_NullDataSource
        {
            get { return GetString("DbTable_NullDataSource"); }
        }

        /// <summary>
        /// The ColumnMapping list is empty.
        /// </summary>
        public static string DbTable_VerifyColumnMappings_Empty
        {
            get { return GetString("DbTable_VerifyColumnMappings_Empty"); }
        }

        /// <summary>
        /// The source column derives from invalid model '{0}'.
        /// </summary>
        public static string ColumnMappingsBuilder_InvalidSourceParentModelSet(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ColumnMappingsBuilder_InvalidSourceParentModelSet"), p0);
        }

        /// <summary>
        /// The target column is invalid.
        /// </summary>
        public static string ColumnMappingsBuilder_InvalidTarget
        {
            get { return GetString("ColumnMappingsBuilder_InvalidTarget"); }
        }

        /// <summary>
        /// Cannot match primary key of current table and the source Model.
        /// </summary>
        public static string DbTable_GetKeyMappings_CannotMatch
        {
            get { return GetString("DbTable_GetKeyMappings_CannotMatch"); }
        }

        /// <summary>
        /// The operation is not supported by readonly list.
        /// </summary>
        public static string NotSupportedByReadOnlyList
        {
            get { return GetString("NotSupportedByReadOnlyList"); }
        }

        /// <summary>
        /// Circular reference detected for table '{0}'.
        /// </summary>
        public static string MockDb_CircularReference(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MockDb_CircularReference"), p0);
        }

        /// <summary>
        /// The table '{0}' cannot be mocked twice.
        /// </summary>
        public static string MockDb_DuplicateTable(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MockDb_DuplicateTable"), p0);
        }

        /// <summary>
        /// DbMock object cannot be initialized twice.
        /// </summary>
        public static string MockDb_InitializeTwice
        {
            get { return GetString("MockDb_InitializeTwice"); }
        }

        /// <summary>
        /// The mocking table is invalid. It must belong to the giving DbSession.
        /// </summary>
        public static string MockDb_InvalidTable
        {
            get { return GetString("MockDb_InvalidTable"); }
        }

        /// <summary>
        /// Mock can only be called during initialization.
        /// </summary>
        public static string MockDb_MockOnlyAllowedDuringInitialization
        {
            get { return GetString("MockDb_MockOnlyAllowedDuringInitialization"); }
        }

        /// <summary>
        /// The type argument '{0}' does not match with type argument '{1}' used for for table '{2}'.
        /// </summary>
        public static string MockDb_ModelTypeMismatch(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MockDb_ModelTypeMismatch"), p0, p1, p2);
        }

        /// <summary>
        /// The provided foreign key is not valid. It must be child of this model.
        /// </summary>
        public static string Model_InvalidForeignKey
        {
            get { return GetString("Model_InvalidForeignKey"); }
        }

        /// <summary>
        /// The returned where expression is invalid.
        /// </summary>
        public static string DbTable_VerifyWhere
        {
            get { return GetString("DbTable_VerifyWhere"); }
        }

        /// <summary>
        /// The child column '{0}' does not exist in the column mappings.
        /// </summary>
        public static string ChildColumnNotExistInColumnMappings(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ChildColumnNotExistInColumnMappings"), p0);
        }

        /// <summary>
        /// The operation requires a primary key of model '{0}'.
        /// </summary>
        public static string DbTable_NoPrimaryKey(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DbTable_NoPrimaryKey"), p0);
        }

        /// <summary>
        /// The source column's data type '{0}' is invalid. Data type '{1}' required.
        /// </summary>
        public static string ColumnMappingsBuilder_InvalidSourceDataType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ColumnMappingsBuilder_InvalidSourceDataType"), p0, p1);
        }

        /// <summary>
        /// No ColumnMapping specified.
        /// </summary>
        public static string ColumnMappingsBuilder_NoColumnMapping
        {
            get { return GetString("ColumnMappingsBuilder_NoColumnMapping"); }
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
