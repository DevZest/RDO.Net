// <auto-generated />
namespace DevZest.Data.Windows
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("DevZest.Data.Windows.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// Auto GridLength must have valid min value specified.
        /// </summary>
        public static string GridLengthParser_AutoLengthMustHaveMinValue
        {
            get { return GetString("GridLengthParser_AutoLengthMustHaveMinValue"); }
        }

        /// <summary>
        /// The input string "{0}" is invalid.
        /// </summary>
        public static string GridLengthParser_InvalidInput(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("GridLengthParser_InvalidInput"), p0);
        }

        /// <summary>
        /// The GridRange does not belong to the same GridTemplate.
        /// </summary>
        public static string GridRange_InvalidOwner
        {
            get { return GetString("GridRange_InvalidOwner"); }
        }

        /// <summary>
        /// The GridRange is empty.
        /// </summary>
        public static string GridRange_VerifyIsEmpty
        {
            get { return GetString("GridRange_VerifyIsEmpty"); }
        }

        /// <summary>
        /// Invalid GridColumn.Width/Orientation combination: GridColumns[{0}]="{1}", Orientation="{2}".
        /// </summary>
        public static string GridTemplate_InvalidGridColumnWidthOrientation(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("GridTemplate_InvalidGridColumnWidthOrientation"), p0, p1, p2);
        }

        /// <summary>
        /// Invalid GridItem for this GridTemplate. Verification failed for GridItem.Owner or GirdItem.ParentModel property.
        /// </summary>
        public static string GridTemplate_InvalidGridItem
        {
            get { return GetString("GridTemplate_InvalidGridItem"); }
        }

        /// <summary>
        /// Invalid GridRow.Height/Orientation combination: GridRows[{0}]="{1}", Orientation="{2}".
        /// </summary>
        public static string GridTemplate_InvalidGridRowHeightOrientation(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("GridTemplate_InvalidGridRowHeightOrientation"), p0, p1, p2);
        }

        /// <summary>
        /// The GridTemplate is currently sealed (read-only).
        /// </summary>
        public static string GridTemplate_VerifyIsSealed
        {
            get { return GetString("GridTemplate_VerifyIsSealed"); }
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
