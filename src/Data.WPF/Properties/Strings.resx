<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BlockItem_IntersectsWithRowRange" xml:space="preserve">
    <value>BlockItems[{index}] intersects with RowRange.</value>
  </data>
  <data name="BlockItem_NullOrientation" xml:space="preserve">
    <value>BlockItem is invalid when Template.Orientation is null.</value>
  </data>
  <data name="BlockItem_OutOfHorizontalRowRange" xml:space="preserve">
    <value>BlockItems[{index}] is out of horizontal side of RowRange.</value>
  </data>
  <data name="BlockItem_OutOfVerticalRowRange" xml:space="preserve">
    <value>BlockItems[{index}] is out of vertical side of RowRange.</value>
  </data>
  <data name="DataItem_IntersectsWithRowRange" xml:space="preserve">
    <value>DataItems[{index}] intersects with RowRange.</value>
  </data>
  <data name="DataItem_OneDimensionalTemplate" xml:space="preserve">
    <value>Multidimensional DataItems[{index}] conflicts with one dimensional Template (Template.BlockDimensions=1).</value>
  </data>
  <data name="DataItem_OutOfHorizontalRowRange" xml:space="preserve">
    <value>Multidimensional DataItems[{index}] is out of horizontal side of RowRange.</value>
  </data>
  <data name="DataItem_OutOfVerticalRowRange" xml:space="preserve">
    <value>Multidimensional DataItems[{index}] is out of vertical side of RowRange.</value>
  </data>
  <data name="GridLengthParser_InvalidInput" xml:space="preserve">
    <value>The input string "{input}" is invalid.</value>
  </data>
  <data name="GridRange_InvalidOwner" xml:space="preserve">
    <value>The GridRange does not belong to the same Template.</value>
  </data>
  <data name="GridRange_VerifyNotEmpty" xml:space="preserve">
    <value>The GridRange is empty.</value>
  </data>
  <data name="RowItem_OutOfRowRange" xml:space="preserve">
    <value>RowItems[{index}] is out of the RowRange.</value>
  </data>
  <data name="RowManager_InvalidCurrentRow" xml:space="preserve">
    <value>The value is invalid. It does not belong to this RowManager.</value>
  </data>
  <data name="RowManager_OrdinalNotTopLevel" xml:space="preserve">
    <value>The specified ordinal must be a top level row.</value>
  </data>
  <data name="RowPresenter_DeleteEof" xml:space="preserve">
    <value>The EOF row cannot be deleted.</value>
  </data>
  <data name="RowPresenter_VerifyColumn" xml:space="preserve">
    <value>The column is invalid. It does not belong to the DataSet.</value>
  </data>
  <data name="RowPresenter_VerifyHierarchical" xml:space="preserve">
    <value>The row must be hierarchical.</value>
  </data>
  <data name="TemplateBuilder_InvalidFlattenHierarchyChildModel" xml:space="preserve">
    <value>The child model is invalid. It must be direct child model and has the same type.</value>
  </data>
  <data name="Template_InvalidAutoHeightGridRow" xml:space="preserve">
    <value>Auto height GridRows[{index}] is invalid for multi-row block.</value>
  </data>
  <data name="Template_InvalidAutoWidthGridColumn" xml:space="preserve">
    <value>Auto width GridColumns[{index}] is invalid for multi-row block.</value>
  </data>
  <data name="Template_InvalidStarHeightGridRow" xml:space="preserve">
    <value>Star height GridRows[{index}] is invalid for repeating.</value>
  </data>
  <data name="Template_InvalidStarWidthGridColumn" xml:space="preserve">
    <value>Star width GridColumns[{index}] is invalid for repeating.</value>
  </data>
</root>