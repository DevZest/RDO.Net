// <auto-generated />
namespace DevZest.Data
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class UserMessages
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("DevZest.Data.UserMessages", typeof(UserMessages).GetTypeInfo().Assembly);

        /// <summary>
        /// The '{0}' field is not a valid credit card number.
        /// </summary>
        public static string CreditCardAttribute
        {
            get { return GetString("CreditCardAttribute"); }
        }

        /// <summary>
        /// The '{0}' field is not a valid e-mail address.
        /// </summary>
        public static string EmailAddressAttribute
        {
            get { return GetString("EmailAddressAttribute"); }
        }

        /// <summary>
        /// The field {0} must have a maxium length of {1}.
        /// </summary>
        public static string MaxLengthAttribute
        {
            get { return GetString("MaxLengthAttribute"); }
        }

        /// <summary>
        /// MaxLengthAttribute must have a length value greater than zero. Remove this MaxLengthAttribute to indicate the binary can have max allowable length.
        /// </summary>
        public static string MaxLengthAttribute_InvalidMaxLength
        {
            get { return GetString("MaxLengthAttribute_InvalidMaxLength"); }
        }

        /// <summary>
        /// Creating table {tableName}...
        /// </summary>
        public static string MockDb_ReportProgress(object tableName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MockDb_ReportProgress", "tableName"), tableName);
        }

        /// <summary>
        /// The '{0}' field is not a valid phone number.
        /// </summary>
        public static string PhoneAttribute
        {
            get { return GetString("PhoneAttribute"); }
        }

        /// <summary>
        /// The field '{0}' must match the regular expression '{1}'.
        /// </summary>
        public static string RegularExpressionAttribute
        {
            get { return GetString("RegularExpressionAttribute"); }
        }

        /// <summary>
        /// Value is required for field '{0}'.
        /// </summary>
        public static string RequiredAttribute
        {
            get { return GetString("RequiredAttribute"); }
        }

        /// <summary>
        /// The field '{0}' must be a string with a maximum length of {1}.
        /// </summary>
        public static string StringLengthAttribute
        {
            get { return GetString("StringLengthAttribute"); }
        }

        /// <summary>
        /// The field '{0}' must be a string with a minimum length of {2} and maximum length of {1}.
        /// </summary>
        public static string StringLengthAttribute_WithMinLength
        {
            get { return GetString("StringLengthAttribute_WithMinLength"); }
        }

        /// <summary>
        /// Value must be unique for field '{0}'.
        /// </summary>
        public static string UniqueAttribute
        {
            get { return GetString("UniqueAttribute"); }
        }

        /// <summary>
        /// The '{0}' field is not a fully-qualified http, https or ftp URL.
        /// </summary>
        public static string UrlAttribute
        {
            get { return GetString("UrlAttribute"); }
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
